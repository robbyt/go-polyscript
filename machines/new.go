//go:generate go run ./types/gen/typeGen.go
// Code generated by go generate; DO NOT EDIT.

package machines

import (
	"fmt"
	"log/slog"

	"github.com/robbyt/go-polyscript/engine"
	"github.com/robbyt/go-polyscript/execution/script"
	extismMachine "github.com/robbyt/go-polyscript/machines/extism"
	risorMachine "github.com/robbyt/go-polyscript/machines/risor"
	starlarkMachine "github.com/robbyt/go-polyscript/machines/starlark"

	machineTypes "github.com/robbyt/go-polyscript/machines/types"
)

// NewEvaluator creates a new VM with the given CPU type and globals.
// This will load a script from a ExecutableUnit object into the VM, and can be run immediately.
// The ExecutableUnit contains a DataProvider that provides runtime data for evaluation.
func NewEvaluator(handler slog.Handler, ver *script.ExecutableUnit) (engine.Evaluator, error) {
	if ver == nil {
		return nil, fmt.Errorf("version is nil")
	}

	switch ver.GetMachineType() {
	case machineTypes.Risor:
		// Risor VM: https://github.com/risor-io/risor
		return risorMachine.NewBytecodeEvaluator(handler, ver), nil
	case machineTypes.Starlark:
		// Starlark VM: https://github.com/google/starlark-go
		return starlarkMachine.NewBytecodeEvaluator(handler, ver), nil
	case machineTypes.Extism:
		// Extism WASM VM: https://extism.org/
		return extismMachine.NewBytecodeEvaluator(handler, ver), nil
	default:
		return nil, fmt.Errorf("%w: %s", machineTypes.ErrInvalidMachineType, ver.GetMachineType())
	}
}

// NewRisorCompiler creates a new Risor compiler using the functional options pattern.
// See the risorMachine package for available options.
func NewRisorCompiler(opts ...risorMachine.Option) (script.Compiler, error) {
	compiler, err := risorMachine.NewCompiler(opts...)
	if err != nil {
		return nil, fmt.Errorf("failed to create Risor compiler: %w", err)
	}
	return compiler, nil
}

// NewStarlarkCompiler creates a new Starlark compiler using the functional options pattern.
// See the starlarkMachine package for available options.
func NewStarlarkCompiler(opts ...starlarkMachine.Option) (script.Compiler, error) {
	compiler, err := starlarkMachine.NewCompiler(opts...)
	if err != nil {
		return nil, fmt.Errorf("failed to create Starlark compiler: %w", err)
	}
	return compiler, nil
}

// NewExtismCompiler creates a new Extism compiler using the functional options pattern.
// See the extismMachine package for available options.
func NewExtismCompiler(opts ...extismMachine.Option) (script.Compiler, error) {
	compiler, err := extismMachine.NewCompiler(opts...)
	if err != nil {
		return nil, fmt.Errorf("failed to create Extism compiler: %w", err)
	}
	return compiler, nil
}
