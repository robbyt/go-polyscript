// Code generated by go generate; DO NOT EDIT.

package types

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGetMachineTypeFromString(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		expected    Type
		expectError bool
	}{
		{
			name:        "valid machine type Risor",
			input:       "Risor",
			expected:    Risor,
			expectError: false,
		},
		{
			name:        "valid machine type Starlark",
			input:       "Starlark",
			expected:    Starlark,
			expectError: false,
		},
		{
			name:        "valid machine type Extism",
			input:       "Extism",
			expected:    Extism,
			expectError: false,
		},
		{
			name:        "invalid machine type",
			input:       "invalid",
			expected:    "",
			expectError: true,
		},
		{
			name:        "empty machine type",
			input:       "",
			expected:    "",
			expectError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Helper()
			result, err := GetMachineTypeFromString(tt.input)
			if tt.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expected, result)
			}
		})
	}
}

func TestGetMachineTypeFromPath(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		expected    Type
		expectError bool
	}{
		{
			name:        "valid file extension .risor",
			input:       "example.risor",
			expected:    Risor,
			expectError: false,
		},
		{
			name:        "file with leading and trailing spaces",
			input:       "  example.risor  ",
			expected:    Risor,
			expectError: false,
		},
		{
			name:        "valid file extension .starlark",
			input:       "example.starlark",
			expected:    Starlark,
			expectError: false,
		},
		{
			name:        "file with leading and trailing spaces",
			input:       "  example.starlark  ",
			expected:    Starlark,
			expectError: false,
		},
		{
			name:        "valid file extension .extism",
			input:       "example.extism",
			expected:    Extism,
			expectError: false,
		},
		{
			name:        "file with leading and trailing spaces",
			input:       "  example.extism  ",
			expected:    Extism,
			expectError: false,
		},
		{
			name:        "invalid file extension .invalid",
			input:       "example.invalid",
			expected:    "",
			expectError: true,
		},
		{
			name:        "empty file extension",
			input:       "example",
			expected:    "",
			expectError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Helper()
			result, err := GetMachineTypeFromPath(tt.input)
			if tt.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expected, result)
			}
		})
	}
}
