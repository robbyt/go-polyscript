// Code generated by go generate; DO NOT EDIT.

package machines

import (
	"log/slog"
	"os"
	"testing"

	"github.com/robbyt/go-polyscript/abstract/data"
	"github.com/robbyt/go-polyscript/abstract/script"
	extismCompiler "github.com/robbyt/go-polyscript/engines/extism/compiler"
	risorCompiler "github.com/robbyt/go-polyscript/engines/risor/compiler"
	starlarkCompiler "github.com/robbyt/go-polyscript/engines/starlark/compiler"
	machineTypes "github.com/robbyt/go-polyscript/engines/types"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

type mockExecutableContent struct {
	mock.Mock
}

func (m *mockExecutableContent) GetMachineType() machineTypes.Type {
	args := m.Called()
	return args.Get(0).(machineTypes.Type)
}

func (m *mockExecutableContent) GetSource() string {
	args := m.Called()
	return args.String(0)
}

func (m *mockExecutableContent) GetByteCode() any {
	args := m.Called()
	return args.Get(0)
}

// mockRisorOption is a mock option satisfying risorCompiler.FunctionalOption.
var mockRisorOption risorCompiler.FunctionalOption = func(c *risorCompiler.Compiler) error {
	return nil
}

// mockStarlarkOption is a mock option satisfying starlarkCompiler.FunctionalOption.
var mockStarlarkOption starlarkCompiler.FunctionalOption = func(c *starlarkCompiler.Compiler) error {
	return nil
}

// mockExtismOption is a mock option satisfying extismCompiler.FunctionalOption.
var mockExtismOption extismCompiler.FunctionalOption = func(c *extismCompiler.Compiler) error {
	return nil
}

func TestNewEvaluator(t *testing.T) {
	tests := []struct {
		name          string
		machineType   machineTypes.Type
		expectError   bool
		expectedError error
	}{
		{
			name:          "Risor machine type",
			machineType:   machineTypes.Risor,
			expectError:   false,
			expectedError: nil,
		},
		{
			name:          "Starlark machine type",
			machineType:   machineTypes.Starlark,
			expectError:   false,
			expectedError: nil,
		},
		{
			name:          "Extism machine type",
			machineType:   machineTypes.Extism,
			expectError:   false,
			expectedError: nil,
		},
		{
			name:          "Unsupported machine type",
			machineType:   "unsupported",
			expectError:   true,
			expectedError: machineTypes.ErrInvalidMachineType,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var ver *script.ExecutableUnit
			if tt.machineType != "" {
				mockContent := new(mockExecutableContent)
				mockContent.On("GetMachineType").Return(tt.machineType)
				ver = &script.ExecutableUnit{
					Content:      mockContent,
					DataProvider: data.NewContextProvider("test_key"),
				}
			}

			handler := slog.NewTextHandler(os.Stdout, nil)
			evaluator, err := NewEvaluator(handler, ver)

			if tt.expectError {
				require.Error(t, err)
				if tt.expectedError != nil {
					require.ErrorIs(t, err, tt.expectedError)
				}
				require.Nil(t, evaluator)
			} else {
				require.NoError(t, err)
				require.NotNil(t, evaluator)
			}
		})
	}
}

func TestNewCompiler(t *testing.T) {
	tests := []struct {
		name        string
		options     []any
		expectError bool
		expectedErr string
	}{
		{
			name:        "No options provided",
			options:     []any{},
			expectError: true,
			expectedErr: "no options provided",
		},
		{
			name:        "Valid Risor options",
			options:     []any{mockRisorOption},
			expectError: false,
		},
		{
			name:        "Valid Starlark options",
			options:     []any{mockStarlarkOption},
			expectError: false,
		},
		{
			name:        "Valid Extism options",
			options:     []any{mockExtismOption},
			expectError: false,
		},
		{
			name:        "Mixed options",
			options:     []any{mockRisorOption, mockStarlarkOption},
			expectError: true,
			expectedErr: "unable to determine compiler type",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			comp, err := NewCompiler(tt.options...)
			if tt.expectError {
				require.Error(t, err)
				require.Nil(t, comp)
				require.Contains(t, err.Error(), tt.expectedErr)
			} else {
				require.NoError(t, err)
				require.NotNil(t, comp)
			}
		})
	}
}
