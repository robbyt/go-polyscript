//go:generate go run ./gen/typeGen.go
// Code generated by go generate; DO NOT EDIT.

package types

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"
)

var ErrInvalidMachineType = errors.New("invalid machine type")

type Type string

func (t Type) String() string {
	return string(t)
}

const (
	Unsupported Type = "unsupported"
	// Risor engine: https://github.com/risor-io/risor
	Risor Type = "risor"
	// Starlark engine: https://github.com/google/starlark-go
	Starlark Type = "starlark"
	// Extism WASM engine: https://extism.org/
	Extism Type = "extism"
)

func GetMachineTypeFromString(machineType string) (Type, error) {
	machineType = strings.ToLower(strings.TrimSpace(machineType))
	machineType = strings.TrimPrefix(machineType, ".")

	switch machineType {
	case "risor":
		return Risor, nil
	case "starlark":
		return Starlark, nil
	case "extism":
		return Extism, nil
	default:
		return "", fmt.Errorf("%w: %s", ErrInvalidMachineType, machineType)
	}
}

func GetMachineTypeFromPath(path string) (Type, error) {
	ext := strings.TrimSpace(strings.ToLower(strings.TrimSpace(filepath.Ext(path))))
	return GetMachineTypeFromString(ext)
}
