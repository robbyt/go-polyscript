// Code generated by go generate; DO NOT EDIT.

package types

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGetMachineTypeFromString(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		expected    Type
		expectError bool
	}{
{{- range .Types}}
		{
			name:        "valid machine type {{.Name}}",
			input:       "{{.Name}}",
			expected:    {{.Name}},
			expectError: false,
		},
{{- end}}
		{
			name:        "invalid machine type",
			input:       "invalid",
			expected:    "",
			expectError: true,
		},
		{
			name:        "empty machine type",
			input:       "",
			expected:    "",
			expectError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Helper()
			result, err := GetMachineTypeFromString(tt.input)
			if tt.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expected, result)
			}
		})
	}
}

func TestGetMachineTypeFromPath(t *testing.T) {
	tests := []struct {
		name        string
		input       string
		expected    Type
		expectError bool
	}{
{{- range .Types}}
		{
			name:        "valid file extension .{{.Value}}",
			input:       "example.{{.Value}}",
			expected:    {{.Name}},
			expectError: false,
		},
		{
			name:        "file with leading and trailing spaces",
			input:       "  example.{{.Value}}  ",
			expected:    {{.Name}},
			expectError: false,
		},
{{- end}}
		{
			name:        "invalid file extension .invalid",
			input:       "example.invalid",
			expected:    "",
			expectError: true,
		},
		{
			name:        "empty file extension",
			input:       "example",
			expected:    "",
			expectError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Helper()
			result, err := GetMachineTypeFromPath(tt.input)
			if tt.expectError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.expected, result)
			}
		})
	}
}
